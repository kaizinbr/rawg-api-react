import Link from "next/link";
import { Suspense } from "react";
import Navbar from "@/components/navigation/Navbar";
import "./globals.css";
import ActionsMenu from "@/components/navigation/ActionsMenu";

import { Work_Sans } from "next/font/google";

const Worksans = Work_Sans({
    subsets: ["latin"],
    display: "swap",
});

// If loading a variable font, you don't need to specify the font weight
// const inter = Inter({
//     subsets: ["latin"],
//     display: "swap",
// });
import localFont from "next/font/local";
import LoadingFull from "./loading";

// Font files can be colocated inside of `app`
const pretendard = localFont({
    src: "../fonts/PretendardVariable.woff2",
    display: "auto",
});

export const metadata = {
    title: "dots",
    description: "Generated by create next app",
};

export default function RootLayout({
    children,
}: {
    children: React.ReactNode;
}) {
    // primary: emerald-300
    // secondary: emerald-200
    // background: bg-neutral-900
    // main test: neutral-300
    return (
        <html lang="pt-br">
            <body
                className={
                    pretendard.className +
                    ` 
                bg-neutral-900 h-full mt-24 mb-20 text-neutral-300 flex flex-col justify-center items-center
            `
                }
            >
                <header className="fixed bottom-0 z-30 mx-auto flex flex-col justify-center items-center">
                    <Navbar />
                    {/* <ActionsMenu /> */}
                </header>
                <div
                    className={`
                            min-[800px]:hidden flex-row items-center justify-center -mt-20 mb-4
                            z-60
                            flex
                        `}
                >
                    <Link
                        className={`
                        text-4xl font-bold text-neutral-100 hover:text-emerald-300
                        transition-all duration-300 ease-in-out
                    `}
                        href="/"
                    >
                        dots
                    </Link>
                </div>
                <main className="w-full">
                    <Suspense fallback={<LoadingFull />}>{children}</Suspense>
                </main>
            </body>
        </html>
    );
}
